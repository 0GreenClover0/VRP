#pragma kernel CSMain

#pragma multi_compile_local _PRECISION_HIGH _PRECISION_SIMPLE _PRECISION_FLAT

#define E 0.0001

RWTexture2D<float> ResultSimulation;
//RWTexture2D<float> ResultRipple;

#if _PRECISION_SIMPLE || _PRECISION_HIGH
Texture2D<float4> WaveOffsetTex;
#endif
Texture2D<float> RippleProjectionTex;

float2 CameraOffset;
float2 ProjectorOffset;
float ProjectorY;

float4 RippleTextureSize;
float4 RippleProjectionSize;
float WaveTextureSize;
float WaveProjectionSize;
float WaveProjectionSizeInv;

float DeltaTime;
float MaxDepth;
float RippleTime;
float RestoreTime;
float BlurStep;
float BlurAttenuation;

sampler LinearClampSampler;



float SampleRippleH(float x, float y)
{
    x = clamp(0, RippleTextureSize.x - 1, x);

    float x1 = floor(x);
    float x2 = ceil(x);

    float a = ResultSimulation[uint2(x1, y)];
    float b = ResultSimulation[uint2(x2, y)];

    return lerp(a, b, frac(x));
}
float SampleRippleV(float x, float y)
{
    y = clamp(0, RippleTextureSize.y - 1, y);

    float y1 = floor(y);
    float y2 = ceil(y);

    float a = ResultSimulation[uint2(x, y1)];
    float b = ResultSimulation[uint2(x, y2)];

    return lerp(a, b, frac(y));
}
float SampleRippleVH(float x, float y)
{
    float a = SampleRippleH(x,y);
    float b = SampleRippleV(x,y);
    return lerp(a, b, 0.5);
}


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float projection = RippleProjectionTex[id.xy];
    float ripple = ResultSimulation[id.xy];

    float2 blurOffsetUnit = float2(
        RippleTextureSize.x * RippleProjectionSize.z,
        RippleTextureSize.y * RippleProjectionSize.w
        ) * BlurStep;

    float nb1 = SampleRippleH(float(id.x) + blurOffsetUnit.x, id.y);
    float nb2 = SampleRippleH(float(id.x) - blurOffsetUnit.x, id.y);
    float nb3 = SampleRippleV(id.x, float(id.y) + blurOffsetUnit.y);
    float nb4 = SampleRippleV(id.x, float(id.y) - blurOffsetUnit.y);

    float nbMax1 = max(max(nb1,nb2), max(nb3,nb4));
    float nbMax = nbMax1;

    float2 rippleUV = float2(id.x, id.y) * float2(RippleTextureSize.z, RippleTextureSize.w);
    float2 position = ProjectorOffset + float2(
        rippleUV.x - 0.5,
        rippleUV.y - 0.5
        ) * RippleProjectionSize.xy;

    float2 waveUV = ((position - CameraOffset) * WaveProjectionSizeInv) + float2(0.5, 0.5);

    #if _PRECISION_HIGH
        float3 resultOffset = WaveOffsetTex.SampleLevel(LinearClampSampler, waveUV, 0).xyz;
        float resultHeightOffset = resultOffset.y;
        {
            float2 samplePosition = position - resultOffset.xz;
            int precision = 3;
            while (--precision > 0)
            {
                float2 sampleUV = ((samplePosition - CameraOffset) * WaveProjectionSizeInv) + float2(0.5, 0.5);
                float2 sampleIDf = sampleUV * float2(WaveTextureSize, WaveTextureSize);
                uint2 sampleID = uint2(
                    floor(clamp(sampleIDf.x, 1, WaveTextureSize - 2)),
                    floor(clamp(sampleIDf.y, 1, WaveTextureSize - 2))
                    );

                float4 offsetSample = WaveOffsetTex[sampleID];
                resultHeightOffset = offsetSample.y;

                if (precision > 1)
                {
                    float2 difference = (samplePosition + offsetSample.xz) - position;
                    samplePosition -= difference;
                }
            }
        }
        float wave = resultHeightOffset + ProjectorY;
    #elif _PRECISION_SIMPLE
        float wave = WaveOffsetTex.SampleLevel(LinearClampSampler, waveUV, 0).y + ProjectorY;
    #elif _PRECISION_FLAT
        float wave = ProjectorY;
    #endif


    float targetRipple = 0.0f;

    if (projection < wave)
    {
        targetRipple = saturate((wave - projection) * MaxDepth);
    }
    else
    {
        targetRipple = saturate(nbMax - BlurAttenuation);
    }

    if (targetRipple > ripple)
    {
        ripple += DeltaTime * RippleTime;
    }
    else if (targetRipple < ripple)
    {
        ripple -= DeltaTime * RestoreTime;
    }

    ripple = saturate(ripple);

    ResultSimulation[id.xy] = ripple;
}